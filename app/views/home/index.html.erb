<!--
* "index", uly, july2012
*
* This view serves as the landing page for our saeko site;
* and functions as the user-interface to our sudoku solver (controller).
*
*
-->

<style>

/* reset css */
{
  margin: 0;
  padding: 0;
} 
p, h1 {
  display: block;
} 
p, h1 {
  padding-bottom: 22px;
}
span.puzzle_label {
  padding-top: 5px;
  padding-bottom: 0px;
  font-weight: bold;
  text-align: center;
  display: table-cell;
  overflow: hidden;

  /*
  width: 38px;
  font-size: 16px;
  */

  width: 53px;
  font-size: 24px; 
}

input.puzzle_cell {
  color: blue;
  text-align: center;
  font-weight: bold;
  display: table-cell;
  overflow: hidden;

  /*font-size: 16px;*/
  /*width: 32px;*/

  font-size: 24px;
  width: 48px; 
}

/*
#id_solve_it {
  text-align: center;
}
*/

ul.puzzle_row {
  text-align: center;
  overflow: hidden;
  list-style: none;
  list-style-type: none;
  margin: 0 auto;
  padding: 0;
} 
ul.puzzle_row li {
  display: inline-block;
  float: left;
}

/*
* emulate our 3x3 boxes by using solid borders.
*/ 
#id_a3,
#id_b3,
#id_c3,
#id_d3,
#id_e3,
#id_f3,
#id_g3,
#id_h3,
#id_i3, 
#id_a6,
#id_b6,
#id_c6,
#id_d6,
#id_e6,
#id_f6,
#id_g6,
#id_h6,
#id_i6  {
  border-right: 4px solid black;
  border-radius: 2px;
}

#id_c1,
#id_c2,
#id_c3,
#id_c4,
#id_c5,
#id_c6,
#id_c7,
#id_c8,
#id_c9,
#id_f1,
#id_f2,
#id_f3,
#id_f4,
#id_f5,
#id_f6,
#id_f7,
#id_f8,
#id_f9 {
  border-bottom: 4px solid black;
  border-radius: 2px; 
}


</style>

<script type="text/javascript">

$(document).ready( function(){ handle_document_ready(); } );

var handle_document_ready = function() { 
  console.debug( "..handle_document_ready.." );

  $("#id_solve_it").bind( 'click', function() {
    console.debug( "..solve_it button click handler.." );
    $("#id_solve_it").attr( 'disabled', 'disabled' );
    var url = '<%= sudoku_solve_path %>' + '?puzzle=' + get_puzzle_as_string();
    $.getJSON( url, function( data ) {
      console.debug( "ajax data:"+data );
      
      // note: as currently implemented, "data" is just the sudoku solution digit-string.
      clobber_puzzle( data );

      $("#id_solve_it").removeAttr( 'disabled', 'disabled' );
    }); 
  }); 

  $("#id_clear_it").bind( 'click', function() {
      clear_puzzle(); 
  }); 

  $("#id_set_to_hardest").bind( 'click', function() {
      set_puzzle_to_hardest(); 
  }); 

}

/* 
* preset our puzzle board to the word's "hardest" puzzle 
* according to http://www.kristanix.com/sudokuepic/worlds-hardest-sudoku.php 
*
* TODO: query server instead of hard coding it.
*
*/
var set_puzzle_to_hardest = function() {
  clobber_puzzle( "100007090030020008009600500005300900010080002600004000300000010040000007007000300" );
}

/* clear our board to all zeroes. */
var clear_puzzle = function() {
  var li = []; 
  for ( var i = 0; i < 81; i++ ) {
    li.push( 0 );
  } 
  clobber_puzzle( li.join('') );
}

/*
* read in a digit-string and
* set the puzzle cell values for all 81 cells.
*
* assumes that cell_values is exactly 81 digits.
*/
var clobber_puzzle = function( cell_values ) {
  var m, n, c, id, val,
    ki = cell_values.split( '' );

  for ( m = 1; m < 10; m++ ) {
    c = get_cell_letter( m ); 
    for ( n = 1; n < 10; n++ ) {
      id = '#id_' + c + n;
      val = ki.splice( 0, 1 );  //..aka reverse pop..
      $(id).val( val );
    }
  }

}

/*
* return a string of digits representing our sudoku puzzle('s current state).
*/
var get_puzzle_as_string = function() {
//return "800000000003600000070090200050007000000045700000100030001000068008500010090000400"; // for testing only!  
  var li = [], 
    n, m, c, id, val;

  for ( m = 1; m < 10; m++ ) {
    c = get_cell_letter( m );
    for ( n = 1; n < 10; n++ ) {
      id = "#id_" + c + n; 
      val = $( id ).val() || 0;
      if ( isNaN( val ) ) {
        val = 0;
      } else if ( val > 9 || val < 0 ) {
        val = 0;
      }
      li.push( val );
    }
  }

  return li.join( '' ); 
}

/*
* return a letter representation of an integer.
* TODO: a more clever way of doing this would be converting it to a charcode, 
* and doing a diff against 'a' like in straight-up java/c.
*/
var get_cell_letter = function( i ) {
  var c = 'x';
  switch ( i ) {
    case 1:
      c = 'a';
      break;
    case 2:
      c = 'b';
      break;
    case 3:
      c = 'c';
      break;
    case 4:
      c = 'd';
      break;
    case 5:
      c = 'e';
      break;
    case 6:
      c = 'f';
      break;
    case 7:
      c = 'g';
      break;
    case 8:
      c = 'h';
      break;
    case 9:
      c = 'i';
      break; 
    default:
      break;
  }

  return c;
}

</script> 

<h1>Sudoku Solver</h1>
<p>Now you too can solve <a href="http://www.kristanix.com/sudokuepic/worlds-hardest-sudoku.php">the world's "hardest" sudoku puzzle(s)</a> within milliseconds.  Just punch in your sudoku puzzle below (use "0" to represent empty spaces), and hit the "Solve Puzzle!" button to (well, you know) solve it.</p>

<!-- 
*
* use ruby to automagically draw our 81 puzzle-cell matrix.
*
-->
<div id="id_puzzle" > 

  <!-- "column" labels... -->
  <ul class="puzzle_row even">
    <li>
      <span class="puzzle_label">*<!-- white space --></span>
    </li>
    <% (1..9).to_a.each do |n| %>
      <li>
        <span class="puzzle_label"><%= n %></span>
      </li>
    <% end %>
  </ul>

  <% ('a'..'i').to_a.each do |c| %>
    <ul class="puzzle_row " >
      <li>
        <span class="puzzle_label"><%= c %></span>
      </li>
    <% (1..9).to_a.each do |n| %>
      <li>
        <input id="id_<%= c %><%= n %>" 
          class="puzzle_cell" 
          type="number" 
          min=  "0" 
          max=  "9"
          step= "1"
          value="0"
          />
      </li>
    <% end %>
    </ul>
  <% end %> 
</div>

<br/>
<button id="id_set_to_hardest" type="button">Set to World's "Hardest"</button>
<button id="id_solve_it" type="button">Solve Puzzle!</button>
<button id="id_clear_it" type="button">Clear</button>

<h2>credits</h2>
<ul>
  <li>
    <a href="https://github.com/OdysseusLevy/sudoku">sudoku solver (clojure) code by Odysseus Levy.</a>
  </li>
  <li>
    <a href="https://github.com/aschyiel/saeko">front-end code by Ulysses Levy.</a>
  </li>
</ul>

